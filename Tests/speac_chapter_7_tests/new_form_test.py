import unittest

from speac.speac_chapter_7.new_form import *
from Tests.speac_chapter_7_tests.chopin_33_3 import *
from speac.speac_chapter_7.speac_settings import SpeacSettings

BOOK_EXAMPLE = [[0, 45, 1000, 4, 55], [0, 64, 1000, 3, 55], [0, 69, 1000, 2, 55], [0, 73, 1000, 1, 55],
                [1000, 57, 1000, 4, 55], [1000, 64, 1000, 3, 55], [1000, 69, 1000, 2, 55], [1000, 73, 500, 1, 55],
                [1500, 74, 500, 1, 55], [2000, 56, 1000, 4, 55], [2000, 64, 1000, 3, 55], [2000, 71, 1000, 2, 55],
                [2000, 76, 1000, 1, 55], [3000, 57, 1000, 4, 55], [3000, 64, 1000, 3, 55], [3000, 69, 1000, 2, 55],
                [3000, 73, 1000, 1, 55], [4000, 54, 1000, 4, 55], [4000, 64, 500, 3, 55], [4500, 62, 500, 3, 55],
                [4000, 69, 1000, 2, 55], [4000, 69, 1000, 1, 55], [5000, 55, 1000, 4, 55], [5000, 62, 1000, 3, 55],
                [5000, 67, 500, 2, 55], [5500, 66, 500, 2, 55], [5000, 71, 1000, 1, 55], [6000, 57, 1000, 4, 55],
                [6000, 57, 1000, 3, 55], [6000, 64, 1000, 2, 55], [6000, 73, 1000, 1, 55], [7000, 50, 1000, 4, 55],
                [7000, 57, 1000, 3, 55], [7000, 66, 1000, 2, 55], [7000, 74, 1000, 1, 55]]

speac_settings = SpeacSettings()

class NewFormTest(unittest.TestCase):

    def test_all(self):
        self.test_my_count()
        self.test_count_harmonic_notes()
        self.test_compare_them()
        self.test_get_function()
        self.test_get_pitches()
        self.test_set_minor_flag()
        self.test_next4()
        self.test_return_best_cadences()
        self.test_cadences()
        self.test_make_composite_rhythm()
        self.test_collect_differential()
        self.test_composite_rhythm()
        self.test_map_density()
        self.test_collect_by_difference()
        self.test_density()
        self.test_collect_patterns()
        self.test_almost_the_same_lists()
        self.test_evaluate_forms()
        self.test_find_letters_used()
        self.test_within_range()
        self.test_return_within_range()
        self.test_reduce_out_close_calls()
        self.test_name_them()
        self.test_combine()

    def test_my_count(self):
        list1 = [79, 64, 48, 48, 65, 65, 50, 50]
        list2 = [38, 50, 62, 74, 86, 41, 53, 65, 77, 89, 46, 58, 70, 82, 94]
        self.assertEqual(my_count(list1, list2), 4)

    def test_count_harmonic_notes(self):
        list1 = [79, 64, 48, 48, 65, 65, 50, 50]
        result = [4, 4, 5, 4, 2, 4, 3, 2, 1, 1, 0, 4, 2, 2, 4, 2, 2, 0, 1, 4]
        self.assertEqual(count_harmonic_notes(list1, ANALYSIS_LEXICON), result)

    def test_compare_them(self):
        list1 = [79, 64, 48, 48, 65, 65, 50, 50]
        result = ANALYSIS_LEXICON[2], ANALYSIS_LEXICON_NAMES[2]
        self.assertEqual(compare_them(list1, ANALYSIS_LEXICON), result)

    def test_get_function(self):
        beat_number = 1
        chord_notes = [79, 64, 48, 48, 65, 65, 50, 50]
        result = [beat_number, "a1"]
        self.assertEqual(get_function(beat_number, chord_notes), result)

        chord_notes = [80, 90]
        result = [beat_number, "p3"]
        self.assertEqual(get_function(beat_number, chord_notes), result)

        chord_notes = [65]
        result = [beat_number, "e4"]
        self.assertEqual(get_function(beat_number, chord_notes), result)

        chord_notes = [62, 57, 60, 62]
        result = [beat_number, "p2"]
        self.assertEqual(get_function(beat_number, chord_notes), result)

        expected = [[0, "a1"], [1000, "a1"], [2000, "a1"], [3000, "c1"], [4000, "c1"], [5000, "c1"], [6000, "a1"],
                    [7000, "a1"],
                    [8000, "a1"], [9000, "c1"], [10000, "c1"], [11000, "c1"], [12000, "s3"], [13000, "c1"],
                    [14000, "s3"],
                    [15000, "e1"], [16000, "e1"], [17000, "e1"], [18000, "s1"], [19000, "c2"], [20000, "s1"],
                    [21000, "a1"],
                    [22000, "a1"], [23000, "a1"], [24000, "a1"], [25000, "a1"], [26000, "a1"], [27000, "c1"],
                    [28000, "c1"],
                    [29000, "c1"], [30000, "a1"], [31000, "a1"], [32000, "a1"], [33000, "c1"], [34000, "c1"],
                    [35000, "c1"],
                    [36000, "s1"], [37000, "a1"], [38000, "s1"], [39000, "a1"], [40000, "a1"], [41000, "a1"],
                    [42000, "a1"],
                    [43000, "a1"], [44000, "a1"], [45000, "c1"], [46000, "c1"], [47000, "e4"], [48000, "a1"],
                    [49000, "p1"],
                    [50000, "a3"], [51000, "c1"], [52000, "c1"], [53000, "c1"], [54000, "a1"], [55000, "a1"],
                    [56000, "a1"],
                    [57000, "e4"], [58000, "e4"], [59000, "c1"], [60000, "c1"], [61000, "a1"], [62000, "a1"],
                    [63000, "c1"],
                    [64000, "c1"], [65000, "c1"], [66000, "c1"], [67000, "a1"], [68000, "a1"], [69000, "c1"],
                    [70000, "a1"],
                    [71000, "c1"], [72000, "c1"], [73000, "a1"], [74000, "a1"], [75000, "c1"], [76000, "a1"],
                    [77000, "c1"],
                    [78000, "a1"], [79000, "c1"], [80000, "a1"], [81000, "e4"], [82000, "e4"], [83000, "c1"],
                    [84000, "c1"],
                    [85000, "a1"], [86000, "a1"], [87000, "c1"], [88000, "c1"], [89000, "c1"], [90000, "c1"],
                    [91000, "a1"],
                    [92000, "a1"], [93000, "c1"], [94000, "a1"], [95000, "c1"], [96000, "a1"], [97000, "a1"],
                    [98000, "a1"],
                    [99000, "c1"], [100000, "c1"], [101000, "c1"], [102000, "a1"], [103000, "a1"], [104000, "a1"],
                    [105000, "c1"], [106000, "c1"], [107000, "c1"], [108000, "s3"], [109000, "c1"], [110000, "s3"],
                    [111000, "e1"], [112000, "e1"], [113000, "e1"], [114000, "s1"], [115000, "c2"], [116000, "s1"],
                    [117000, "a1"], [118000, "a1"], [119000, "a1"], [120000, "a1"], [121000, "a1"], [122000, "a1"],
                    [123000, "c1"], [124000, "c1"], [125000, "c1"], [126000, "a1"], [127000, "a1"], [128000, "a1"],
                    [129000, "c1"], [130000, "c1"], [131000, "c1"], [132000, "s1"], [133000, "a1"], [134000, "s1"],
                    [135000, "a1"], [136000, "a1"], [137000, "a1"], [138000, "a1"], [139000, "a1"], [140000, "a1"],
                    [141000, "c1"], [142000, "c1"], [143000, "e4"]]

        captured_beats = capture_beats(CHOPIN_33_3, 1000)

        pitches = []
        for beat in captured_beats:
            pitches.append(get_pitches(beat))

        functions = []
        for pitch in pitches:
            fun = get_function(pitch[0], pitch[1])
            functions.append(fun)

        self.assertEqual(expected, functions)

    def test_get_pitches(self):
        input = [[61000, 60, 1000, 4, 96], [61000, 76, 1000, 1, 96], [62000, 86, 1000, 1, 96]]
        result = [61000, [60, 76, 86]]
        self.assertEqual(result, get_pitches(input))

    def test_set_minor_flag(self):
        self.assertEqual(4, set_minor_flag([2000, "p4"], 0))
        self.assertEqual(2, set_minor_flag([2000, "p2"], 3))
        self.assertEqual(0, set_minor_flag([1000, "s1"], 0))
        self.assertEqual(1, set_minor_flag([1000, "s1"], 2))

    def test_next4(self):
        self.assertEqual(True, next_4([[0, "c2"], [1000, "p2"], [2000, "c1"]]))
        self.assertEqual(False, next_4([[0, "a1"], [1000, "p2"], [2000, "c2"], [2000, "c2"]]))

    def test_return_best_cadences(self):
        functions = [[0, "A1"], [1000, "A1"], [2000, "A1"], [3000, "C1"], [4000, "C1"], [5000, "C1"], [6000, "A1"],
                     [7000, "A1"], [8000, "A1"], [9000, "C1"], [10000, "C1"], [11000, "C1"], [12000, "A3"],
                     [13000, "S4"], [14000, "A1"],
                     [15000, "C2"]]

        speac_settings.set_cadence_minimum(3000)
        result = [[4000, "C1"], [9000, "C1"], [14000, "A1"]]
        self.assertEqual(result, return_best_cadences(functions, speac_settings))

        captured_beats = capture_beats(CHOPIN_33_3, 1000)

        speac_settings.set_cadence_minimum(9000)
        pitches = []
        for beat in captured_beats:
            pitches.append(get_pitches(beat))

        functions = []
        for pitch in pitches:
            fun = get_function(pitch[0], pitch[1])
            functions.append(fun)

        result = [[10000, "c1"], [21000, "a1"], [33000, "c1"], [45000, "c1"], [56000, "a1"], [67000, "a1"],
                  [79000, "c1"], [90000, "c1"], [101000, "c1"], [117000, "a1"], [129000, "c1"], [141000, "c1"]]

        self.assertEqual(result, return_best_cadences(functions, speac_settings))

    def test_cadences(self):
        music = CHOPIN_33_3
        result = [["c1", 10000], ["a1", 21000], ["c1", 33000], ["c1", 45000], ["a1", 56000], ["a1", 67000],
                  ["c1", 79000], ["c1", 90000], ["c1", 101000], ["a1", 117000], ["c1", 129000], ["c1", 141000]]
        self.assertEqual(result, cadences(music, speac_settings))

    def test_make_composite_rhythm(self):
        events = [[10, 1, 2, 3, 4], [10, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], [5, 2, 3, 4, 5], [11, 2, 3, 4, 5]]
        result = [0, 5, 10, 11]
        self.assertEqual(result, make_composite_rhythm(events))

    def test_collect_differential(self):
        events = [11, 2323, 3443, 4003, 6656]
        self.assertEqual([[1, 0], [1, 2323], [2, 3443], [1, 6656]], collect_differential(events))
        events = [0, 1500, 2500, 5000, 7000]
        self.assertEqual([[1, 0], [2, 1500], [1, 5000], [1, 7000]], collect_differential(events))
        self.assertEqual([[212, 0]], collect_differential(make_composite_rhythm(CHOPIN_33_3)))

    def test_composite_rhythm(self):
        self.assertEqual([[212, 0]], composite_rhythm(CHOPIN_33_3))

    def test_map_density(self):
        beats = capture_beats(CHOPIN_33_3, 1000)
        result = [[4, 0], [4, 1000], [6, 2000], [5, 3000], [4, 4000], [6, 5000], [5, 6000], [4, 7000], [6, 8000],
                  [5, 9000], [4, 10000], [4, 11000], [4, 12000], [5, 13000], [6, 14000], [6, 15000], [5, 16000],
                  [6, 17000], [4, 18000], [5, 19000], [6, 20000], [5, 21000], [4, 22000], [5, 23000],
                  [4, 24000], [4, 25000], [6, 26000], [5, 27000], [3, 28000], [5, 29000], [5, 30000],
                  [4, 31000], [6, 32000], [5, 33000], [3, 34000], [4, 35000], [4, 36000], [4, 37000],
                  [6, 38000], [6, 39000], [5, 40000], [6, 41000], [5, 42000], [4, 43000], [6, 44000],
                  [4, 45000], [3, 46000], [1, 47000], [3, 48000], [4, 49000], [4, 50000], [3, 51000],
                  [4, 52000], [4, 53000], [3, 54000], [4, 55000], [4, 56000], [2, 57000], [5, 58000],
                  [5, 59000], [3, 60000], [4, 61000], [5, 62000], [3, 63000], [5, 64000], [3, 65000],
                  [5, 66000], [5, 67000], [7, 68000], [5, 69000], [4, 70000], [4, 71000], [5, 72000],
                  [4, 73000], [3, 74000], [5, 75000], [4, 76000], [4, 77000], [5, 78000], [5, 79000],
                  [5, 80000], [3, 81000], [6, 82000], [6, 83000], [4, 84000], [5, 85000], [7, 86000],
                  [5, 87000], [5, 88000], [3, 89000], [5, 90000], [5, 91000], [7, 92000], [5, 93000],
                  [4, 94000], [6, 95000], [4, 96000], [4, 97000], [6, 98000], [5, 99000], [4, 100000],
                  [6, 101000], [5, 102000], [4, 103000], [6, 104000], [5, 105000], [4, 106000], [4, 107000],
                  [4, 108000], [4, 109000], [6, 110000], [6, 111000], [5, 112000], [6, 113000], [4, 114000],
                  [4, 115000], [6, 116000], [5, 117000], [4, 118000], [5, 119000], [4, 120000], [4, 121000],
                  [6, 122000], [5, 123000], [4, 124000], [6, 125000], [5, 126000], [4, 127000], [6, 128000],
                  [5, 129000], [4, 130000], [4, 131000], [4, 132000], [4, 133000], [6, 134000], [6, 135000],
                  [4, 136000], [6, 137000], [5, 138000], [4, 139000], [6, 140000], [4, 141000], [3, 142000],
                  [1, 143000]]

        self.assertEqual(result, map_density(beats))

    def test_collect_by_difference(self):
        beats = capture_beats(CHOPIN_33_3, 1000)
        input = map_density(beats)
        self.assertEqual([[58, 0], [24, 58000], [62, 82000]], collect_by_differences(input))

        beats = capture_beats(CHOPIN_33_3, 300)
        input = map_density(beats)
        result = [[3, 0], [1, 900], [2, 1300], [1, 1900], [7, 2200], [2, 4300], [1, 4900], [7, 5200], [2, 7300],
                  [1, 7900], [7, 8200], [2, 10300], [1, 10900], [6, 11200], [1, 12900], [2, 13300], [1, 13900],
                  [6, 14200], [1, 15900], [2, 16300], [1, 16900], [6, 17200], [3, 18900], [1, 19900],
                  [7, 20200], [2, 22300], [1, 22900], [6, 23200], [1, 24900], [2, 25300], [1, 25900],
                  [7, 26200], [2, 28300], [8, 28900], [2, 31300], [1, 31900], [7, 32200], [2, 34300],
                  [7, 34900], [1, 36900], [2, 37300], [1, 37900], [6, 38200], [1, 39900], [2, 40300],
                  [1, 40900], [7, 41200], [2, 43300], [1, 43900], [10, 44200], [6, 47300], [3, 48900],
                  [1, 49900], [6, 50300], [3, 51900], [1, 52900], [6, 53300], [3, 54900], [1, 55900],
                  [6, 56300], [3, 57900], [1, 58800], [3, 59300], [3, 60000], [3, 60900], [1, 61900],
                  [6, 62200], [4, 63900], [6, 65200], [3, 66900], [1, 67900], [9, 68200], [1, 70900],
                  [9, 71300], [1, 73900], [9, 74300], [1, 76900], [6, 77300], [3, 78900], [1, 79900],
                  [6, 80300], [3, 81900], [1, 82800], [3, 83300], [3, 84000], [3, 84900], [1, 85900],
                  [6, 86200], [3, 87900], [1, 88900], [6, 89300], [3, 90900], [1, 91900], [16, 92200],
                  [1, 96900], [2, 97300], [1, 97900], [7, 98200], [2, 100300], [1, 100900], [7, 101200],
                  [2, 103300], [1, 103900], [7, 104200], [2, 106300], [1, 106900], [6, 107200], [1, 108900],
                  [2, 109300], [1, 109900], [6, 110200], [1, 111900], [2, 112300], [1, 112900], [9, 113200],
                  [1, 115900], [7, 116200], [2, 118300], [1, 118900], [6, 119200], [1, 120900], [2, 121300],
                  [1, 121900], [7, 122200], [2, 124300], [1, 124900], [7, 125200], [2, 127300], [1, 127900],
                  [7, 128200], [2, 130300], [1, 130900], [6, 131200], [1, 132900], [2, 133300], [1, 133900],
                  [7, 134200], [2, 136300], [1, 136900], [7, 137200], [2, 139300], [1, 139900], [10, 140200],
                  [3, 143300]]
        self.assertEqual(result, collect_by_differences(input))

    def test_density(self):
        self.assertEqual([[58, 0], [24, 58000], [62, 82000]], density(CHOPIN_33_3, speac_settings))

    def test_collect_patterns(self):
        list = [85, 0, [2]]
        lists = [[69, 2500, [-2]], [83, 3750, [1]], [83, 5500, [1]], [83, 6750, [1]], [69, 8500, [-2]], [83, 9750, [1]],
                 [83, 12000, [1]], [69, 14500, [-2]], [83, 15750, [1]], [83, 17500, [1]], [26, 18750, [3]],
                 [65, 20500, [-1]], [8, 21750, [5]], [85, 24000, [2]], [69, 26500, [-2]], [83, 27750, [1]],
                 [83, 29500, [1]], [83, 30750, [1]], [69, 32500, [-2]], [83, 33750, [1]], [85, 36000, [2]],
                 [69, 38500, [-2]], [83, 39750, [1]], [85, 41500, [2]], [10, 42750, [4]], [44, 44500, [-3]],
                 [10, 47000, [4]], [69, 48500, [-2]], [69, 50000, [-2]], [10, 51500, [4]], [83, 53000, [1]],
                 [85, 54500, [2]], [83, 56000, [1]], [83, 59000, [1]], [69, 61000, [-2]], [65, 63000, [-1]],
                 [65, 64000, [-1]], [83, 66000, [1]], [65, 67000, [-1]], [69, 69000, [-2]], [69, 70000, [-2]],
                 [83, 72000, [1]], [85, 73000, [2]], [83, 75000, [1]], [83, 76000, [1]], [83, 78000, [1]],
                 [83, 79000, [1]], [83, 81000, [1]], [83, 84500, [1]], [69, 86500, [-2]], [83, 87500, [1]],
                 [65, 89000, [-1]], [83, 90500, [1]], [69, 92500, [-2]], [85, 93500, [2]], [85, 95500, [2]],
                 [69, 97000, [-2]], [65, 99000, [-1]], [83, 100000, [1]], [83, 102000, [1]], [69, 103000, [-2]],
                 [65, 105000, [-1]], [65, 106000, [-1]], [65, 109000, [-1]], [65, 111000, [-1]], [85, 112000, [2]],
                 [83, 114000, [1]], [69, 115000, [-2]], [83, 117000, [1]], [4, 118000, [-5]], [69, 121000, [-2]],
                 [65, 123000, [-1]], [83, 124000, [1]], [83, 126000, [1]], [69, 127000, [-2]], [65, 129000, [-1]],
                 [44, 130000, [-3]], [69, 133000, [-2]], [65, 135000, [-1]], [85, 136000, [2]], [83, 138000, [1]],
                 [69, 139000, [-2]], [83, 141000, [1]]]
        type = "a"
        result = [[69, 2500, [-2]], ['a', 3750, [1]], ['a', 5500, [1]], ['a', 6750, [1]], [69, 8500, [-2]],
                  ['a', 9750, [1]], ['a', 12000, [1]], [69, 14500, [-2]], ['a', 15750, [1]], ['a', 17500, [1]],
                  ['a', 18750, [3]], [65, 20500, [-1]], [8, 21750, [5]], ['a', 24000, [2]], [69, 26500, [-2]],
                  ['a', 27750, [1]], ['a', 29500, [1]], ['a', 30750, [1]], [69, 32500, [-2]], ['a', 33750, [1]],
                  ['a', 36000, [2]], [69, 38500, [-2]], ['a', 39750, [1]], ['a', 41500, [2]], [10, 42750, [4]],
                  [44, 44500, [-3]], [10, 47000, [4]], [69, 48500, [-2]], [69, 50000, [-2]], [10, 51500, [4]],
                  ['a', 53000, [1]], ['a', 54500, [2]], ['a', 56000, [1]], ['a', 59000, [1]], [69, 61000, [-2]],
                  [65, 63000, [-1]], [65, 64000, [-1]], ['a', 66000, [1]], [65, 67000, [-1]], [69, 69000, [-2]],
                  [69, 70000, [-2]], ['a', 72000, [1]], ['a', 73000, [2]], ['a', 75000, [1]], ['a', 76000, [1]],
                  ['a', 78000, [1]], ['a', 79000, [1]], ['a', 81000, [1]], ['a', 84500, [1]], [69, 86500, [-2]],
                  ['a', 87500, [1]], [65, 89000, [-1]], ['a', 90500, [1]], [69, 92500, [-2]], ['a', 93500, [2]],
                  ['a', 95500, [2]], [69, 97000, [-2]], [65, 99000, [-1]], ['a', 100000, [1]], ['a', 102000, [1]],
                  [69, 103000, [-2]], [65, 105000, [-1]], [65, 106000, [-1]], [65, 109000, [-1]], [65, 111000, [-1]],
                  ['a', 112000, [2]], ['a', 114000, [1]], [69, 115000, [-2]], ['a', 117000, [1]], [4, 118000, [-5]],
                  [69, 121000, [-2]], [65, 123000, [-1]], ['a', 124000, [1]], ['a', 126000, [1]], [69, 127000, [-2]],
                  [65, 129000, [-1]], [44, 130000, [-3]], [69, 133000, [-2]], [65, 135000, [-1]], ['a', 136000, [2]],
                  ['a', 138000, [1]], [69, 139000, [-2]], ['a', 141000, [1]]]

        self.assertEqual(result, collect_patterns(list, lists, type, speac_settings))

        list = [4, 0, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]
        lists = [[4, 24000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                 [4, 96000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                 [4, 120000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]]
        type = "a"
        result = [["a", 24000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  ["a", 96000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  ["a", 120000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]]
        self.assertEqual(result, collect_patterns(list, lists, type, speac_settings))

        list = [4, 0, [8, 8, -2, -1, 1, 1, 1, 1, 1, -2, -2]]
        lists = [[4, 24000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                 [4, 96000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                 [4, 120000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]]
        type = "a"
        result = [[4, 24000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  [4, 96000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  [4, 120000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]]
        self.assertEqual(result, collect_patterns(list, lists, type, speac_settings))

    def test_almost_the_same_lists(self):
        speac_settings.set_pattern_size(2)
        input = simple_matcher(CHOPIN_33_3, speac_settings)
        result = [['a', 0, [2]], ['b', 2500, [-2]], ['a', 3750, [1]], ['a', 5500, [1]], ['a', 6750, [1]],
                  ['b', 8500, [-2]], ['a', 9750, [1]], ['a', 12000, [1]], ['b', 14500, [-2]], ['a', 15750, [1]],
                  ['a', 17500, [1]], ['a', 18750, [3]], ['b', 20500, [-1]], ['c', 21750, [5]], ['a', 24000, [2]],
                  ['b', 26500, [-2]], ['a', 27750, [1]], ['a', 29500, [1]], ['a', 30750, [1]], ['b', 32500, [-2]],
                  ['a', 33750, [1]], ['a', 36000, [2]], ['b', 38500, [-2]], ['a', 39750, [1]], ['a', 41500, [2]],
                  ['c', 42750, [4]], ['b', 44500, [-3]], ['c', 47000, [4]], ['b', 48500, [-2]], ['b', 50000, [-2]],
                  ['c', 51500, [4]], ['a', 53000, [1]], ['a', 54500, [2]], ['a', 56000, [1]], ['a', 59000, [1]],
                  ['b', 61000, [-2]], ['b', 63000, [-1]], ['b', 64000, [-1]], ['a', 66000, [1]], ['b', 67000, [-1]],
                  ['b', 69000, [-2]], ['b', 70000, [-2]], ['a', 72000, [1]], ['a', 73000, [2]], ['a', 75000, [1]],
                  ['a', 76000, [1]], ['a', 78000, [1]], ['a', 79000, [1]], ['a', 81000, [1]], ['a', 84500, [1]],
                  ['b', 86500, [-2]], ['a', 87500, [1]], ['b', 89000, [-1]], ['a', 90500, [1]], ['b', 92500, [-2]],
                  ['a', 93500, [2]], ['a', 95500, [2]], ['b', 97000, [-2]], ['b', 99000, [-1]], ['a', 100000, [1]],
                  ['a', 102000, [1]], ['b', 103000, [-2]], ['b', 105000, [-1]], ['b', 106000, [-1]],
                  ['b', 109000, [-1]], ['b', 111000, [-1]], ['a', 112000, [2]], ['a', 114000, [1]], ['b', 115000, [-2]],
                  ['a', 117000, [1]], ['d', 118000, [-5]], ['b', 121000, [-2]], ['b', 123000, [-1]],
                  ['a', 124000, [1]], ['a', 126000, [1]], ['b', 127000, [-2]], ['b', 129000, [-1]], ['b', 130000, [-3]],
                  ['b', 133000, [-2]], ['b', 135000, [-1]], ['a', 136000, [2]], ['a', 138000, [1]], ['b', 139000, [-2]],
                  ['a', 141000, [1]]]

        self.assertEqual(result, almost_the_same_lists(input, speac_settings))

    def test_evaluate_forms(self):
        result = [[["c1", 10000], ["a1", 21000], ["c1", 33000], ["c1", 45000], ["a1", 56000], ["a1", 67000],
                   ["c1", 79000], ["c1", 90000], ["c1", 101000], ["a1", 117000], ["c1", 129000], ["c1", 141000]]]
        min = 6
        max = 12
        cadences_result = cadences(CHOPIN_33_3, speac_settings)
        density_result = density(CHOPIN_33_3, speac_settings)
        rhythm_result = composite_rhythm(CHOPIN_33_3)
        forms = [cadences_result, density_result, rhythm_result]
        self.assertEqual(result, evaluate_forms(max, min, forms))

    def test_find_letters_used(self):
        speac_settings.set_pattern_size(2)
        patterns = almost_the_same_lists(simple_matcher(CHOPIN_33_3, speac_settings), speac_settings)
        self.assertEqual(['a', 'b', 'c', 'd'], find_letters_used(patterns))

    def test_within_range(self):
        input = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]
        max = 5
        min = 3
        self.assertEqual([[1, 2], [5, 6], [6, 7]], within_range(min, max, input))

    def test_return_within_range(self):
        original = [["a", 0, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                    ["a", 24000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                    ["a", 96000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                    ["a", 120000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]]
        other = [["a1", 21000], ["a1", 39000], ["c1", 59000], ["c1", 77000],
                 ["c1", 95000], ["a1", 117000], ["a1", 135000]]

        self.assertEqual([["c1", 59000]], return_within_range(original, other, 3, speac_settings))

    def test_reduce_out_close_calls(self):
        speac_settings.set_pattern_size(2)
        cadences_result = cadences(CHOPIN_33_3, speac_settings)
        density_result = density(CHOPIN_33_3, speac_settings)
        rhythm_result = composite_rhythm(CHOPIN_33_3)
        patterns = almost_the_same_lists(simple_matcher(CHOPIN_33_3, speac_settings), speac_settings)
        forms_result = evaluate_forms(12, 6, [cadences_result, density_result, rhythm_result])
        self.assertEqual([[]], reduce_out_close_calls(patterns, forms_result, 3, speac_settings))

    result = [['a', 0, [2]], ['b', 2500, [-2]], ['a', 3750, [1]], ['a', 5500, [1]], ['a', 6750, [1]],
              ['b', 8500, [-2]], ['a', 9750, [1]], ['a', 12000, [1]], ['b', 14500, [-2]], ['a', 15750, [1]],
              ['a', 17500, [1]], ['a', 18750, [3]], ['b', 20500, [-1]], ['c', 21750, [5]], ['a', 24000, [2]],
              ['b', 26500, [-2]], ['a', 27750, [1]], ['a', 29500, [1]], ['a', 30750, [1]], ['b', 32500, [-2]],
              ['a', 33750, [1]], ['a', 36000, [2]], ['b', 38500, [-2]], ['a', 39750, [1]], ['a', 41500, [2]],
              ['c', 42750, [4]], ['b', 44500, [-3]], ['c', 47000, [4]], ['b', 48500, [-2]], ['b', 50000, [-2]],
              ['c', 51500, [4]], ['a', 53000, [1]], ['a', 54500, [2]], ['a', 56000, [1]], ['a', 59000, [1]],
              ['b', 61000, [-2]], ['b', 63000, [-1]], ['b', 64000, [-1]], ['a', 66000, [1]], ['b', 67000, [-1]],
              ['b', 69000, [-2]], ['b', 70000, [-2]], ['a', 72000, [1]], ['a', 73000, [2]], ['a', 75000, [1]],
              ['a', 76000, [1]], ['a', 78000, [1]], ['a', 79000, [1]], ['a', 81000, [1]], ['a', 84500, [1]],
              ['b', 86500, [-2]], ['a', 87500, [1]], ['b', 89000, [-1]], ['a', 90500, [1]], ['b', 92500, [-2]],
              ['a', 93500, [2]], ['a', 95500, [2]], ['b', 97000, [-2]], ['b', 99000, [-1]], ['a', 100000, [1]],
              ['a', 102000, [1]], ['b', 103000, [-2]], ['b', 105000, [-1]], ['b', 106000, [-1]],
              ['b', 109000, [-1]], ['b', 111000, [-1]], ['a', 112000, [2]], ['a', 114000, [1]], ['b', 115000, [-2]],
              ['a', 117000, [1]], ['d', 118000, [-5]], ['b', 121000, [-2]], ['b', 123000, [-1]], ['a', 124000, [1]],
              ['a', 126000, [1]], ['b', 127000, [-2]], ['b', 129000, [-1]], ['b', 130000, [-3]],
              ['b', 133000, [-2]], ['b', 135000, [-1]], ['a', 136000, [2]], ['a', 138000, [1]], ['b', 139000, [-2]],
              ['a', 141000, [1]]]

    def test_name_them(self):
        speac_settings.set_pattern_size(2)
        cadences_result = cadences(CHOPIN_33_3, speac_settings)
        density_result = density(CHOPIN_33_3, speac_settings)
        rhythm_result = composite_rhythm(CHOPIN_33_3)
        patterns = almost_the_same_lists(simple_matcher(CHOPIN_33_3, speac_settings), speac_settings)
        forms_result = evaluate_forms(12, 6, [cadences_result, density_result, rhythm_result])
        forms = [forms_result, patterns]
        reduce_result = reduce_out_close_calls(patterns, forms_result, 3, speac_settings)

        input = []
        for element in forms[-1]:
            input.append(element)

        for element in reduce_result:
            if element != []:
                input.append(element)

        used_letters = find_letters_used(forms[-1])
        used_letters.sort()
        alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k," "l", "m",
                    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
        letters = remove_all(used_letters, alphabet)
        self.assertEqual(self.result, name_them(input, letters))

    def test_combine(self):
        speac_settings.set_pattern_size(2)
        cadences_result = cadences(CHOPIN_33_3, speac_settings)
        density_result = density(CHOPIN_33_3, speac_settings)
        rhythm_result = composite_rhythm(CHOPIN_33_3)
        patterns = almost_the_same_lists(simple_matcher(CHOPIN_33_3, speac_settings), speac_settings)
        min = 6
        max = 12

        forms_result = evaluate_forms(max, min, [cadences_result, density_result, rhythm_result])
        forms_result.append(patterns)
        combine_input = forms_result
        self.assertEqual(self.result, combine(combine_input, 3, speac_settings))

    def test_eval_combine_and_integrate_forms(self):
        speac_settings.set_pattern_size(12)
        result = [["a", 0, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  ["a", 24000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  ["b", 56000], ["b", 67000], ["a", 96000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]],
                  ["a", 120000, [2, -2, -2, -1, 1, 1, 1, 1, 1, -2, -2]]]
        self.assertEqual(result, eval_combine_and_integrate_forms(CHOPIN_33_3, 3, speac_settings))
